{"version":3,"sources":["../src/components/slot/index.tsx","../src/components/slot-machine/index.tsx","../src/hooks/use-slot-machine.ts"],"names":["jsx"],"mappings":";;;;AASO,IAAM,OAA4B,CAAC;AAAA,EACxC,QAAA;AAAA,EACA,SAAA;AAAA,EACA,KAAA;AAAA,EACA,GAAG;AACL,CAAA,KAAM;AACJ,EAAA,2BACG,KAAA,EAAA,EAAI,SAAA,EAAsB,KAAA,EAAe,GAAG,OAC1C,QAAA,EACH,CAAA;AAEJ;ACCA,IAAM,cAAA,GAGF,CACF,EAAE,iBAAA,EAAmB,SAAA,EAAW,UAAU,KAAA,EAAO,GAAG,KAAA,EAAM,EAC1D,GAAA,KACG;AACH,EAAA,MAAM,CAAC,UAAA,EAAY,aAAa,CAAA,GAAI,SAAS,KAAK,CAAA;AAClD,EAAA,MAAM,cAAA,GAAsC;AAAA,IAC1C,OAAA,EAAS,MAAA;AAAA,IACT,GAAA,EAAK,KAAA;AAAA,IACL,GAAG;AAAA,GACL;AAEA,EAAA,mBAAA;AAAA,IACE,GAAA;AAAA,IACA,OAAO;AAAA,MACL,MAAM,MAAM;AACV,QAAA,OAAA,CAAQ,IAAI,8BAA8B,CAAA;AAC1C,QAAA,aAAA,CAAc,IAAI,CAAA;AAClB,QAAA,iBAAA,GAAoB,IAAI,CAAA;AAExB,QAAA,UAAA,CAAW,MAAM;AACf,UAAA,OAAA,CAAQ,IAAI,iBAAiB,CAAA;AAC7B,UAAA,aAAA,CAAc,KAAK,CAAA;AAEnB,UAAA,iBAAA,GAAoB,KAAK,CAAA;AAAA,QAC3B,GAAG,GAAG,CAAA;AAAA,MACR,CAAA;AAAA,MACA,IAAI,UAAA,GAAa;AACf,QAAA,OAAO,UAAA;AAAA,MACT;AAAA,KACF,CAAA;AAAA,IACA,CAAC,UAAU;AAAA,GACb;AAEA,EAAA,uBACEA,IAAC,KAAA,EAAA,EAAI,SAAA,EAAsB,OAAO,cAAA,EAAiB,GAAG,OACnD,QAAA,EACH,CAAA;AAEJ,CAAA;AAEO,IAAM,WAAA,GAAc,WAAW,cAAc;AC/C7C,IAAM,iBAAiB,MAAM;AAClC,EAAA,MAAM,YAAA,GAAe,OAA8B,IAAI,CAAA;AAEvD,EAAA,OAAO;AAAA,IACL;AAAA,GACF;AACF","file":"index.mjs","sourcesContent":["import React from \"react\";\n\nexport interface SlotProps {\n  children?: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  [key: string]: any;\n}\n\nexport const Slot: React.FC<SlotProps> = ({\n  children,\n  className,\n  style,\n  ...props\n}) => {\n  return (\n    <div className={className} style={style} {...props}>\n      {children}\n    </div>\n  );\n};\n","import React, {\n  ForwardedRef,\n  forwardRef,\n  ForwardRefRenderFunction,\n  useImperativeHandle,\n  useState,\n} from \"react\";\n\nexport interface SlotMachineProps {\n  children?: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  [key: string]: any;\n}\n\nexport interface SlotMachineRef {\n  onSpinStateChange?: (isSpinning: boolean) => void;\n  isSpinning: boolean;\n  spin: () => void;\n}\n\nconst SlotMachineRef: ForwardRefRenderFunction<\n  SlotMachineRef,\n  SlotMachineProps\n> = (\n  { onSpinStateChange, className, children, style, ...props }: SlotMachineProps,\n  ref: ForwardedRef<SlotMachineRef>\n) => {\n  const [isSpinning, setIsSpinning] = useState(false);\n  const containerStyle: React.CSSProperties = {\n    display: \"flex\",\n    gap: \"8px\",\n    ...style,\n  };\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      spin: () => {\n        console.log(\"Spinning the slot machine...\");\n        setIsSpinning(true);\n        onSpinStateChange?.(true);\n\n        setTimeout(() => {\n          console.log(\"Spin completed!\");\n          setIsSpinning(false);\n\n          onSpinStateChange?.(false);\n        }, 500);\n      },\n      get isSpinning() {\n        return isSpinning;\n      },\n    }),\n    [isSpinning]\n  );\n\n  return (\n    <div className={className} style={containerStyle} {...props}>\n      {children}\n    </div>\n  );\n};\n\nexport const SlotMachine = forwardRef(SlotMachineRef);\n","import { useRef } from \"react\";\n\nexport interface SlotItem {\n  id: string;\n  [key: string]: any;\n}\n\nexport interface SelectedItemType {\n  item: SlotItem;\n  index: number;\n}\n\nexport interface UseSlotMachineProps {\n  children?: React.ReactNode;\n  [key: string]: any;\n}\n\nexport const useSlotMachine = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  return {\n    containerRef,\n  };\n};\n"]}