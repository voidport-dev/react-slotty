{"version":3,"sources":["../src/components/slot/index.tsx","../src/components/slot-machine/index.tsx","../src/hooks/use-slot-machine.ts"],"names":["jsx"],"mappings":";;;;AASO,IAAM,OAA4B,CAAC;AAAA,EACxC,QAAA;AAAA,EACA,SAAA;AAAA,EACA,KAAA;AAAA,EACA,GAAG;AACL,CAAA,KAAM;AACJ,EAAA,2BACG,KAAA,EAAA,EAAI,SAAA,EAAsB,KAAA,EAAe,GAAG,OAC1C,QAAA,EACH,CAAA;AAEJ;ACXO,IAAM,cAA0C,CAAC;AAAA,EACtD,QAAA;AAAA,EACA,SAAA;AAAA,EACA,KAAA;AAAA,EACA,GAAG;AACL,CAAA,KAAM;AACJ,EAAA,MAAM,cAAA,GAAsC;AAAA,IAC1C,OAAA,EAAS,MAAA;AAAA,IACT,GAAA,EAAK,KAAA;AAAA,IACL,GAAG;AAAA,GACL;AAEA,EAAA,uBACEA,IAAC,KAAA,EAAA,EAAI,SAAA,EAAsB,OAAO,cAAA,EAAiB,GAAG,OACnD,QAAA,EACH,CAAA;AAEJ;ACTO,IAAM,iBAAiB,MAAM;AAClC,EAAA,MAAM,YAAA,GAAe,OAA8B,IAAI,CAAA;AAEvD,EAAA,OAAO;AAAA,IACL;AAAA,GACF;AACF","file":"index.mjs","sourcesContent":["import React from \"react\";\n\nexport interface SlotProps {\n  children?: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  [key: string]: any;\n}\n\nexport const Slot: React.FC<SlotProps> = ({\n  children,\n  className,\n  style,\n  ...props\n}) => {\n  return (\n    <div className={className} style={style} {...props}>\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport interface SlotMachineProps {\n  children?: React.ReactNode;\n  className?: string;\n  style?: React.CSSProperties;\n  [key: string]: any;\n}\n\nexport const SlotMachine: React.FC<SlotMachineProps> = ({\n  children,\n  className,\n  style,\n  ...props\n}) => {\n  const containerStyle: React.CSSProperties = {\n    display: \"flex\",\n    gap: \"8px\",\n    ...style,\n  };\n\n  return (\n    <div className={className} style={containerStyle} {...props}>\n      {children}\n    </div>\n  );\n};\n","import { useRef } from \"react\";\n\nexport interface SlotItem {\n  id: string;\n  [key: string]: any;\n}\n\nexport interface SelectedItemType {\n  item: SlotItem;\n  index: number;\n}\n\nexport interface UseSlotMachineProps {\n  children?: React.ReactNode;\n  [key: string]: any;\n}\n\nexport const useSlotMachine = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  return {\n    containerRef,\n  };\n};\n"]}